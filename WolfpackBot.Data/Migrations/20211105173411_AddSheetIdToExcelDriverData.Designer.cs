// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WolfpackBot.Data;

namespace WolfpackBot.Data.Migrations
{
    [DbContext(typeof(WolfpackDbContext))]
    [Migration("20211105173411_AddSheetIdToExcelDriverData")]
    partial class AddSheetIdToExcelDriverData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("WolfpackBot.Data.Models.ChampionshipResultsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Car")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diff")
                        .HasColumnType("TEXT");

                    b.Property<string>("Driver")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExcelSheetEventMappingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExcelSheetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Points")
                        .HasColumnType("TEXT");

                    b.Property<int>("Pos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ExcelSheetId");

                    b.ToTable("ChampionshipResults");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastRoundDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastRoundTrack")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRoundDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NextRoundTrack")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("NextTrackMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("StandingsMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TwitterMessage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.EventAliasMappingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAliasMapping");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.EventSignup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventSignup");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.ExcelSheetEventMappingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRoundsSheet")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sheetname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("ExcelSheetEventMapping");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.Leaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Game")
                        .HasColumnType("TEXT");

                    b.Property<string>("GuildId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.LeaderboardEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaderboardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProofUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubmittedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.LeaderboardModerator", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("GuildId", "RoleId");

                    b.ToTable("LeaderboardModerators");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.ChampionshipResultsModel", b =>
                {
                    b.HasOne("WolfpackBot.Data.Models.Event", "Event")
                        .WithMany("ChampionshipResults")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WolfpackBot.Data.Models.ExcelSheetEventMappingModel", "ExcelSheet")
                        .WithMany()
                        .HasForeignKey("ExcelSheetId");

                    b.Navigation("Event");

                    b.Navigation("ExcelSheet");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.EventAliasMappingModel", b =>
                {
                    b.HasOne("WolfpackBot.Data.Models.Event", "Event")
                        .WithMany("EventAliasMappings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.EventSignup", b =>
                {
                    b.HasOne("WolfpackBot.Data.Models.Event", "event")
                        .WithMany("EventSignups")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("event");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.ExcelSheetEventMappingModel", b =>
                {
                    b.HasOne("WolfpackBot.Data.Models.Event", "Event")
                        .WithMany("ExcelSheetEventMappings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.LeaderboardEntry", b =>
                {
                    b.HasOne("WolfpackBot.Data.Models.Leaderboard", "Leaderboard")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.Event", b =>
                {
                    b.Navigation("ChampionshipResults");

                    b.Navigation("EventAliasMappings");

                    b.Navigation("EventSignups");

                    b.Navigation("ExcelSheetEventMappings");
                });

            modelBuilder.Entity("WolfpackBot.Data.Models.Leaderboard", b =>
                {
                    b.Navigation("LeaderboardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
